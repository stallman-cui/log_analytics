#!/usr/bin/env python
import zmq.green as zmq
import logging
import sys
import os

basedir, bin = os.path.split(os.path.dirname(os.path.abspath(sys.argv[0])))
sys.path.insert(0, basedir)

from analyticslib.lib import *

class GamelogCmd():
    """ read the gamelog data,
    and send it
    """
    def __init__(self):
        self.open()
        #set_game_area_plat()
        self.areas = get_game_area_plat()['area']
        self.count = 0

    def open(self, conf='', topology_context='', output_collector=''):
        ''' Called when a task for this component is initialized '''
        self.context = zmq.Context()
        self.socket = self.context.socket(zmq.REQ)
        self.socket.connect("tcp://127.0.0.1:5000")

    def next_tuple(self, i):
        ''' When this method is called, the spout emit 
        tuples to the output collector. 
        '''
        line = gamelog_parse(i)
        if line:
            line = gamelog_filter(line)
            if line:
                line['game'] = self.areas[line['area']]
                message_tuple = {
                    'body' : line,
                    'state' : line['op']['code']
                }
                self.count += 1
                self.socket.send_json(message_tuple)
                ack_no = self.socket.recv_string()
                if ack_no != 'Error':
                    self.ack(ack_no)
                else:
                    self.fail(ack_no)

    def ack(self, msg_id):
        ''' The tuple emiited by this spout with the msg_id has been fully processed. '''
        #print("Gamelog: request was Sucessed, messsage_id: %d \n" % int(msg_id))
        print '.',

    def fail(self, msg_id):
        ''' The tuple emitted by this spout with the msg_id has filed to be fully processed. '''
        print("Gamelog: request was Failed, messsage_id: %d \n" % int(msg_id))

if __name__ == '__main__':
    cmd = GamelogCmd()
    for i in sys.stdin.readlines():
        cmd.next_tuple(i)
    print 'Total: ', cmd.count

    
